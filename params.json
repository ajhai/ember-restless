{"name":"ember-restless","tagline":"A lightweight data persistence library for Ember.js","body":"# Ember RESTless [![Build Status](https://travis-ci.org/endlessinc/ember-restless.png?branch=master)](https://travis-ci.org/endlessinc/ember-restless)\r\n\r\nRESTless is a lightweight data persistence library for Ember.js. (~4KB minified & gzipped)\r\n\r\nOut of the box, it is used to communicate with a remote JSON REST API to map data between a server and your Ember.js application.  \r\n\r\nRESTless can be extended to support various other data persistence layers. For example, to handle XML data instead of JSON, or store data to localStorage instead of a remote server.\r\n\r\nOne of its main goals is to reproduce much of the simple, useful features of [ember-data](https://github.com/emberjs/data), and reflect a similar API, while remaining lightweight and stable. RESTless does not contain all of the features provided by ember-data, but was created to be less complex and contain most of the functionality needed for basic CRUD apps.  Transitioning between the two should be possible with minimal effort.\r\n\r\nCurrent version: **0.4**  \r\nSee the [Changelog](CHANGELOG.md) for the latest features and API changes.\r\n\r\n### Table of Contents\r\n- [Getting started](#getting-started)\r\n- [Defining a RESTAdapter](#defining-a-restadapter)\r\n- [Defining a 'Client'](#defining-a-client)\r\n- [Models](#models)\r\n    - [Relationships](#relationships)\r\n    - [Finding records](#finding-records)\r\n    - [Creating records](#creating-records)\r\n    - [Saving records](#saving-records)\r\n    - [Deleting records](#deleting-records)\r\n    - [Reloading records](#reloading-records)\r\n    - [Side-loading records](#side-loading-records)\r\n    - [Model lifecycle](#model-lifecycle)\r\n- [Promises](#promises)\r\n- [Extras](#extras)\r\n- [Advanced](#advanced)\r\n- [Building RESTless](#building-restless)\r\n- [Tests](#tests)\r\n\r\n## Getting started\r\n\r\nInclude [ember-restless.js](https://raw.github.com/endlessinc/ember-restless/master/dist/ember-restless.js) in your application. (found in the ```dist/``` folder)\r\n\r\n**Namespace**\r\n\r\nRESTless can be referenced either with the namespace **RESTless** or the shorthand **RL**.  Similar to **Ember** and **Em**\r\n\r\n### Defining a RESTAdapter\r\n\r\nThe REST adapter is responsible for communicating with your backend REST service.\r\nHere, you can set the url, and optionally a namespace.  \r\nFor example, if your REST API is located at http://api.myservice.com/v1\r\n``` javascript\r\nApp.RESTAdapter = RL.RESTAdapter.create({\r\n  url: 'http://api.myservice.com',\r\n  namespace: 'v1'\r\n});\r\n```\r\n\r\n### Defining a 'Client'\r\n\r\nSimilar to defining the 'Store' using ember-data, instead define the 'Client' for your application.  RESTless will automatically detect the Client on your application namespace and initialize RESTless to work with you app.\r\n\r\n``` javascript\r\nApp.Client = RL.Client.create({\r\n  adapter: App.RESTAdapter\r\n});\r\n```\r\n\r\n### Models\r\n\r\nEach model you create should extend RL.Model  \r\nSupported attribute types are string, number, boolean, and date.\r\n\r\n``` javascript\r\nApp.Post = RL.Model.extend({\r\n  title:       RL.attr('string'),\r\n  isPublished: RL.attr('boolean'),\r\n  readCount:   RL.attr('number'),\r\n  createdAt:   RL.attr('date')\r\n});\r\n```\r\nYou can define custom attribute types in your adapter.  See the advanced section below.\r\n\r\n\r\n### Relationships\r\n\r\nFor one-to-one relationships use the _belongsTo_ attribute helper.\r\n\r\n``` javascript\r\nApp.User = RL.Model.extend({\r\n  name: RL.attr('string'),\r\n  role: RL.attr('number')\r\n});\r\n\r\nApp.Profile = RL.Model.extend({\r\n  user: RL.belongsTo('App.User')\r\n});\r\n```\r\n\r\nFor one-to-many relationships, use the _hasMany_ helper.  \r\nFor example, if a ```Post``` model contains an array of ```Tag``` models:\r\n``` javascript\r\nApp.Tag = RL.Model.extend({\r\n  name: RL.attr('string'),\r\n  count: RL.attr('number')\r\n});\r\n\r\nApp.Post = RL.Model.extend({\r\n  tags: RL.hasMany('App.Tag')\r\n});\r\n```\r\n_Currently, all relational data should be embedded in the response. Also, see [Side-loading records](#side-loading-records)._\r\n\r\n\r\n### Finding records\r\n\r\nUse the ```find()``` method to retrieve records.\r\n\r\nTo find a Post with an id of 1:\r\n\r\n``` javascript\r\nvar post = App.Post.find(1);\r\n```\r\n\r\nTo use a query to find:\r\n``` javascript\r\nvar posts = App.Post.find({ isPublished: true });\r\n```\r\n\r\nTo find all records:\r\n\r\n``` javascript\r\nvar posts = App.Post.find();\r\n```\r\n\r\nThe find method supports all query types, however, explicit methods are also available:  \r\n```findAll()```, ```findQuery()```, ```findByKey()``` / ```findById()```\r\n\r\n\r\n### Creating records\r\n\r\nCreate records like you would a normal Ember Object:\r\n\r\n``` javascript\r\nvar post = App.Post.create({\r\n  title: 'My First Post'\r\n});\r\n```\r\n\r\n### Saving records\r\n\r\nSimply call: ```saveRecord()```  \r\nThe Adapter will automatically POST to save a new record, or PUT to update an existing record.\r\n\r\n``` javascript\r\nvar post = App.Post.create({ title: 'My First Post' });\r\npost.saveRecord();\r\n```\r\nUpdating:\r\n``` javascript\r\npost.set('title', 'My Very First Post');\r\npost.saveRecord();\r\n```\r\n\r\n### Deleting records\r\n\r\nThe Adapter will delete the record remotely, then destroy the object when complete:\r\n``` javascript\r\npost.deleteRecord();\r\n```\r\n\r\n### Reloading records\r\n\r\nTo refresh an existing record from the data store: ```reloadRecord()```\r\n\r\n``` javascript\r\nvar post = App.Post.find(1);\r\n// ...\r\npost.reloadRecord();\r\n```\r\n\r\n### Side-loading records\r\n\r\nYou can manually populate records using raw data (side-loading).  \r\nUse the ```load``` and ```loadMany``` convenience methods:\r\n\r\n``` javascript\r\nvar post = App.Post.create();\r\n\r\n// The following could have been retrieved from a separate ajax request\r\nvar commentData = { comment: { \"id\": 101, message: \"Some comment\" } };\r\nvar comment = App.Comment.load(commentData);\r\npost.set('comment', comment);\r\n\r\nvar postTagData = [\r\n  { \"id\": 1, \"name\": \"technology\", \"count\": 50 },\r\n  { \"id\": 2, \"name\": \"entertainment\", \"count\": 11 }\r\n];\r\nvar tags = App.Tag.loadMany(postTagData);\r\npost.set('tags', tags);\r\n```\r\n\r\n### Model lifecycle and state\r\n\r\nAll models have the following state properties added:\r\n\r\n* **isNew**: Record has been created but not yet saved\r\n* **isLoaded**: Record(s) have been retrieved\r\n* **isDirty**: The record has local changes that have not yet been stored\r\n* **isSaving**: Record is in the process of saving\r\n* **isError**: Record has been attempted to be saved, updated, or deleted but returned an error. Error messages are store in the **errors** property.\r\n\r\nYou can subscribe to events that are fired during the lifecycle:\r\n\r\n* **didLoad**\r\n* **didCreate**\r\n* **didUpdate**\r\n* **becameError**\r\n\r\n**Event Examples:**\r\n``` javascript\r\nvar post = App.Post.create({ title: 'My First Post' });\r\n\r\npost.on('didCreate', function() {\r\n  console.log('post created!');\r\n});\r\npost.on('becameError', function(error) {\r\n  console.log('error saving post!');\r\n});\r\npost.saveRecord();\r\n```\r\n\r\n``` javascript\r\nvar allPosts = App.Post.find();\r\n\r\nallPosts.on('didLoad', function() {\r\n  console.log('posts retrieved!');\r\n});\r\nallPosts.on('becameError', function(error) {\r\n  console.log('error getting posts!');\r\n});\r\n```\r\n\r\n### Promises\r\n\r\nCRUD actions return promises (```saveRecord()```, ```deleteRecord()``` and ```reloadRecord()```), allowing you to do the following:\r\n``` javascript\r\nvar post = App.Post.create({\r\n  title: 'My First Post'\r\n});\r\n\r\npost.saveRecord().then(function(record) {\r\n  // Success!\r\n}, function(errors) {\r\n  // Error!\r\n});\r\n```\r\n\r\n**To take advantage of promises when finding records, use ```fetch()``` instead of ```find()```**  \r\n```fetch()``` returns a promise, while ```find()``` will return entities that will update when resolved.  \r\n_Promises allows you to take advantage of the new Ember Router hooks introduced in RC6._\r\n``` javascript\r\nvar posts = App.Post.fetch().then(function(records) {\r\n  // Success!\r\n}, function(error) {\r\n  // Error!\r\n});\r\n```\r\n\r\n- - -  \r\n\r\n## Extras\r\n\r\nTo keep RESTless lightweight and focused, the default distrubtion solely supports a REST Adapter.  \r\nWe are separately offering an \"extras\" build: [ember-restless+extras.js](https://raw.github.com/endlessinc/ember-restless/master/dist/ember-restless+extras.js).\r\nCurrently, this adds a FixtureAdapter, with more to come!\r\n\r\n- - -  \r\n\r\n## Advanced\r\n\r\n### Changing resource endpoints\r\nSometimes the name of your Ember model is different than the API endpoint.  \r\nFor example if a ```CurrentUser``` model needs to point to ```/users``` and ```/user/1```  \r\n``` javascript\r\nApp.CurrentUser = RL.Model.extend();\r\nApp.CurrentUser.reopenClass({\r\n  resourceName: 'user'\r\n});\r\n```\r\n\r\n### Custom plurals configuration\r\nYou can use a custom adapter to set irregular plural resource names\r\n``` javascript\r\nApp.RESTAdapter.configure(\"plurals\", {\r\n  person: \"people\"\r\n});\r\n```\r\n\r\n### Changing the the primary key for a model\r\nThe primary key for all models defaults to 'id'. \r\nYou can customize it per model class to match your API:\r\n``` javascript\r\nApp.RESTAdapter.map(\"App.Post\", {\r\n  primaryKey: \"slug\"\r\n});\r\n```\r\n\r\n### Mapping different property keys\r\nFor example, if your JSON has a key ```lastNameOfPerson``` and the desired attribute name is ```lastName```:\r\n``` javascript\r\nApp.Person = RL.Model.extend({\r\n  lastName: RL.attr('string')\r\n});\r\nApp.RESTAdapter.map('App.Person', {\r\n  lastName: { key: 'lastNameOfPerson' }\r\n});\r\n```\r\n\r\n### Forcing content type extentions\r\nIf you want the RESTAdapter to add extentions to requests:\r\nFor example ```/users.json``` and ```/user/1.json```  \r\n``` javascript\r\nApp.RESTAdapter = RESTless.RESTAdapter.create({\r\n  useContentTypeExtension: true\r\n});\r\n```\r\n\r\n### Default attribute values\r\nYou can define default values to assign to newly created instances of a model:\r\n``` javascript\r\nApp.User = RL.Model.extend({\r\n  name: RL.attr('string'),\r\n  role: RL.attr('number', { defaultValue: 3 })\r\n});\r\n```\r\n\r\n### Read-only attributes\r\nYou can make attributes 'read-only', which will exclude them from being serialized and transmitted when saving.\r\nFor example, if you want to let the backend compute the date a record is created:\r\n``` javascript\r\nApp.Person = RL.Model.extend({\r\n  firstName: RL.attr('string'),\r\n  lastName: RL.attr('string'),\r\n  createdAt: RL.attr('date', { readOnly: true })\r\n});\r\n```\r\n\r\n### Read-only models\r\nYou can make an entire model to read-only. This removes all 'write' methods and provides a slight performance increase since each property won't have to be observed for 'isDirty'.\r\n``` javascript\r\nApp.Post = RL.ReadOnlyModel.extend({\r\n...\r\n});\r\n```\r\n\r\n### Custom transforms\r\nYou can add custom transforms to your adapter:\r\n``` javascript\r\nApp.RESTAdapter.registerTransform('timeAgo', {\r\n  deserialize: function(serialized) {\r\n    // return a custom date string, such as: '5 minutes ago'\r\n  },\r\n  serialize: function(deserialized) {\r\n    // return a custom date json format for your backend or \r\n    // simply return deserialized\r\n  }\r\n});\r\n```\r\n``` javascript\r\nApp.Comment = RL.Model.extend({\r\n  createdAt: RL.attr('timeAgo')\r\n});\r\n```\r\n\r\n### Custom Adapters & Serializers\r\nRESTless is abstracted so you can write your own Adapters and Serializers.\r\n``` javascript\r\nApp.XMLSerializer = RL.Serializer.create({\r\n  ...\r\n});\r\nApp.SOAPAdapter = RL.Adapter.create({\r\n  serializer: App.XMLSerializer\r\n  ...\r\n});\r\nApp.Client = RL.Client.create({\r\n  adapter: App.SOAPAdapter\r\n});\r\n```\r\n\r\n\r\n## Building RESTless\r\n\r\nIf you wish to build ember-restless yourself, you will need node.js and Grunt.  \r\n\r\n1. Install node: <a href=\"http://nodejs.org/\">http://nodejs.org/</a>\r\n2. Open a terminal window\r\n3. Install dependencies: ```npm install```\r\n4. Build: ```grunt```\r\n5. Output will be ```dist/ember-restless.js``` and ```dist/ember-restless.min.js```\r\n\r\n### Custom Builds\r\n\r\nYou can create custom builds, that exclude optional packages and further reduce filesize.  \r\nFor example, to exclude the json transforms and date parsing libs:\r\n```\r\ngrunt custom:-transforms\r\n```\r\n\r\n## Tests\r\n\r\nUses QUnit.  \r\nTests are run during the grunt build process.  \r\nTo run tests manually, you can open tests/index.html in a browser.  \r\n\r\n## Example Apps\r\n\r\nComing soon.\r\n\r\n\r\n## Contributors\r\n\r\nThanks to the Ember core team and contributors for creating Ember and Ember Data.  \r\nSpecial thanks to the following for creating & contributing to the ember-restless project:\r\n\r\n- [Garth Poitras](https://github.com/gdub22) | [twitter](https://twitter.com/papapoitch)\r\n- [Tyler Love](https://github.com/tylr)\r\n- [Gopal Patel](https://github.com/nixme)\r\n","google":"UA-31687651-2","note":"Don't delete this file! It's used internally to help with page regeneration."}